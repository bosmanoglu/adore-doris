#!/usr/bin/env python
#http://python.zirael.org/e-gtk-uimanager1.html
# ensure that PyGTK 2.0 is loaded - not an older version
import pygtk
pygtk.require('2.0')
# import the GTK module
import gtk

import os
import sys
import subprocess
import shlex
import ConfigParser

import settingsEditor
import dialogs
try:
  import vte
except:
  print >> sys.stderr, "You need to have python-libvte installed."
  sys.exit(1)

class MyGUI:

  #ui_file = open('adore-gui.ui', 'r')
  #ui = ui_file.read()

  def __init__( self, title,argv):
    self.argv=argv or "/scr/adore -g -i"
    self.set = ConfigParser.ConfigParser()
    self.setFile="/tmp/adore.set"
    self.menuCommands={"checkProcess": "check",
                       "checkSetup": "check setup",
                       "demCheck": "dem check",
                       "demMake": "dem make",
                       "demUnload": "dem unload",
                       "hcr_?": "?",
                       "hcr_addrefpha2s_crop": "? addrefpha2s_crop",
                       "hcr_archive": "? archive",
                       "hcr_ask": "? ask",
                       "hcr_baselines": "? baselines",
                       "hcr_bold": "? bold",
                       "hcr_calculate_coh_multilook": "? calculate_coh_multilook",
                       "hcr_calculate_coh_winsize": "? calculate_coh_winsize",
                       "hcr_calculate_rs_dbow": "? calculate_rs_dbow",
                       "hcr_call": "? call",
                       "hcr_canonicalPath": "? canonicalPath",
                       "hcr_check": "? check",
                       "hcr_checkInitialSettings": "? checkInitialSettings",
                       "hcr_coarsecorr": "? coarsecorr",
                       "hcr_coarseorb": "? coarseorb",
                       "hcr_coherence": "? coherence",
                       "hcr_comprefdem": "? comprefdem",
                       "hcr_comprefpha": "? comprefpha",
                       "hcr_coregpm": "? coregpm",
                       "hcr_dem": "? dem",
                       "hcr_dem2slant2h": "? dem2slant2h",
                       "hcr_demassist": "? demassist",
                       "hcr_dinsar": "? dinsar",
                       "hcr_dorisProcess2OutputFile": "? dorisProcess2OutputFile",
                       "hcr_error": "? error",
                       "hcr_exclude": "? exclude",
                       "hcr_filtphase": "? filtphase",
                       "hcr_filtrange": "? filtrange",
                       "hcr_fine": "? fine",
                       "hcr_generateRandomString": "? generateRandomString",
                       "hcr_geocode": "? geocode",
                       "hcr_getSystemEndianness": "? getSystemEndianness",
                       "hcr_gnuplot_baseline": "? gnuplot_baseline",
                       "hcr_h": "? h",
                       "hcr_initialize": "? initialize",
                       "hcr_interfero": "? interfero",
                       "hcr_m_crop": "? m_crop",
                       "hcr_m_filtazi": "? m_filtazi",
                       "hcr_m_ovs": "? m_ovs",
                       "hcr_m_porbits": "? m_porbits",
                       "hcr_m_readfiles": "? m_readfiles",
                       "hcr_m_simamp": "? m_simamp",
                       "hcr_m_timing": "? m_timing",
                       "hcr_mask": "? mask",
                       "hcr_mvDorisFiles": "? mvDorisFiles",
                       "hcr_p": "? p",
                       "hcr_pn2rs": "? pn2rs",
                       "hcr_pp": "? pp",
                       "hcr_quejob": "? quejob",
                       "hcr_raster": "? raster",
                       "hcr_reltiming": "? reltiming",
                       "hcr_report": "? report",
                       "hcr_resample": "? resample",
                       "hcr_s": "? s",
                       "hcr_s_crop": "? s_crop",
                       "hcr_s_crop2resample": "? s_crop2resample",
                       "hcr_s_filtazi": "? s_filtazi",
                       "hcr_s_ovs": "? s_ovs",
                       "hcr_s_porbits": "? s_porbits",
                       "hcr_s_readfiles": "? s_readfiles",
                       "hcr_saveas": "? saveas",
                       "hcr_scenes": "? scenes",
                       "hcr_setPS1": "? setPS1",
                       "hcr_settings": "? settings",
                       "hcr_slant2h": "? slant2h",
                       "hcr_slant2htrick": "? slant2htrick",
                       "hcr_strcmpi": "? strcmpi",
                       "hcr_subtrrefdem": "? subtrrefdem",
                       "hcr_subtrrefpha": "? subtrrefpha",
                       "hcr_testFunction": "? testFunction",
                       "hcr_undo": "? undo",
                       "hcr_unwrap": "? unwrap",
                       "hcr_view": "? view",
                       "hcr_waitjob": "? waitjob",                       
                      }
    self.window = gtk.Window()
    self.title = title
    self.window.set_title( title)
    self.window.set_size_request( 800, 600)
    try:
      self.window.set_icon_from_file(ADOREGUIFOLDER+"/adore-doris-icon-256px.png")
    except Exception, e:
      print e.message
      pass
    self.window.connect( "destroy", self.destroy)
    self.create_interior()
    self.window.show_all()

  def create_interior( self):
    self.mainbox = gtk.VBox()
    self.window.add( self.mainbox)
    # vte term
    # create action group
    self.actiongroup = gtk.ActionGroup('MyActionGroup')
    self.actiongroup.add_actions(
      [('About', None, '_About'),
       ('File', None, '_File'),
       ('Quit', None, '_Quit', '<ALT>q', 'Quit ADORE.', self.file_quit),
       ('Edit', None, '_Edit'),
       ('Copy', None, '_Copy', '<CTRL><SHIFT>c', 'Copy selected text.', self.edit_copy),
       ('Paste', None, '_Paste','<CTRL><SHIFT>v', 'Paste text from clipboard.', self.edit_paste),
       ('Check', None, '_Check'),
       ('checkProcess', None, 'Process', None, '', self.runMenuCmd),
       ('checkSetup', None, 'Setup', None, '', self.runMenuCmd),
       ('DEM', None, '_DEM'),
       ('demCheck', None, 'Check', None, '', self.runMenuCmd),
       ('demLoad', None, 'Load...', None, '', self.demLoad),
       ('demMake', None, 'Make...', None, '', self.demMake),
       ('demUnload', None, 'Unload', None, '', self.runMenuCmd),
       ('Process', None, '_Process'),
       ('Master', None, '_Master'),
       ('m_readfiles', None, 'm__readfiles', None, '', self.runMenuName),
       ('m_porbits', None, 'm__porbits', None, '', self.runMenuName),
       ('m_crop', None, 'm__crop', None, '', self.runMenuName),
       ('m_simamp', None, 'm__simamp', None, '', self.runMenuName),
       ('m_timing', None, 'm__timing', None, '', self.runMenuName),
       ('m_ovs', None, 'm__ovs', None, '', self.runMenuName),
       ('m_filtazi', None, 'm__filtazi', None, 'Run after coarsecorr', self.runMenuName),
       ('Slave', None, '_Slave'),
       ('s_readfiles', None, 's__readfiles', None, '', self.runMenuName),
       ('s_porbits', None, 's__porbits', None, '', self.runMenuName),
       ('s_crop', None, 's__crop', None, '', self.runMenuName),
       ('s_ovs', None, 's__ovs', None, '', self.runMenuName),
       ('s_filtazi', None, 's__filtazi', None, 'Run after coarsecorr', self.runMenuName),
       ('Interferogram', None, '_Interferogram'),
       ('coarseorb', None, 'coarseorb', None, '', self.runMenuName),
       ('coarsecorr', None, 'coarsecorr', None, '', self.runMenuName),
       ('fine', None, 'fine', None, '', self.runMenuName),
       ('reltiming', None, 'reltiming', None, '', self.runMenuName),
       ('demassist', None, 'demassist', None, '', self.runMenuName),
       ('coregpm', None, 'coregpm', None, '', self.runMenuName),
       ('resample', None, 'resample', None, '', self.runMenuName),
       ('filtrange', None, 'filtrange', None, '', self.runMenuName),
       ('interfero', None, 'interfero', None, '', self.runMenuName),
       ('comprefpha', None, 'comprefpha', None, '', self.runMenuName),
       ('subtrrefpha', None, 'subtrrefpha', None, '', self.runMenuName),
       ('comprefdem', None, 'comprefdem', None, '', self.runMenuName),
       ('subtrrefdem', None, 'subtrrefdem', None, '', self.runMenuName),
       ('coherence', None, 'coherence', None, '', self.runMenuName),
       ('filtphase', None, 'filtphase', None, '', self.runMenuName),
       ('unwrap', None, 'unwrap', None, '', self.runMenuName),
       ('dinsar', None, 'dinsar', None, '', self.runMenuName),
       ('slant2htrick', None, 'slant2htrick', None, '', self.runMenuName),
       ('slant2h', None, 'slant2h', None, '', self.runMenuName),
       ('geocode', None, 'geocode', None, '', self.runMenuName),
       #('', None, '_', None, '', self.process_),
       ('Settings', None, '_Settings'),
       ('settingsEditor', None, '_Editor', None, 'Graphical Editor for settings.', self.settings_editor),
       ('settingsCheck', None, '_Check', None, 'Check settings against default values.', self.settings_check),
       ('settingsFix', None, '_Fix', None, 'Fix settings using default relations.', self.settings_fix),
       ('settingsLoad', None, '_Load', None, 'Load settings from current folder.', self.settings_load),
       ('settingsSave', None, '_Save', None, 'Save settings to current folder.', self.settings_save),
       ('settingsReset',  None, '_Reset',  None, 'Reset settings to defaults', self.settings_reset),
       ('Help', None, '_Help'),
       ('helpCommandReference', None, 'Offline _Command Reference'),
       ('hcr_?', None, '?', None, 'Help on ?', self.runMenuCmd),
       ('hcr_addrefpha2s_crop', None, 'addrefpha2s__crop', None, 'Help on addrefpha2s_crop', self.runMenuCmd),
       ('hcr_archive', None, 'archive', None, 'Help on archive', self.runMenuCmd),
       ('hcr_ask', None, 'ask', None, 'Help on ask', self.runMenuCmd),
       ('hcr_baselines', None, 'baselines', None, 'Help on baselines', self.runMenuCmd),
       ('hcr_bold', None, 'bold', None, 'Help on bold', self.runMenuCmd),
       ('hcr_calculate_coh_multilook', None, 'calculate__coh__multilook', None, 'Help on calculate_coh_multilook', self.runMenuCmd),
       ('hcr_calculate_coh_winsize', None, 'calculate__coh__winsize', None, 'Help on calculate_coh_winsize', self.runMenuCmd),
       ('hcr_calculate_rs_dbow', None, 'calculate__rs__dbow', None, 'Help on calculate_rs_dbow', self.runMenuCmd),
       ('hcr_call', None, 'call', None, 'Help on call', self.runMenuCmd),
       ('hcr_canonicalPath', None, 'canonicalPath', None, 'Help on canonicalPath', self.runMenuCmd),
       ('hcr_check', None, 'check', None, 'Help on check', self.runMenuCmd),
       ('hcr_checkInitialSettings', None, 'checkInitialSettings', None, 'Help on checkInitialSettings', self.runMenuCmd),
       ('hcr_coarsecorr', None, 'coarsecorr', None, 'Help on coarsecorr', self.runMenuCmd),
       ('hcr_coarseorb', None, 'coarseorb', None, 'Help on coarseorb', self.runMenuCmd),
       ('hcr_coherence', None, 'coherence', None, 'Help on coherence', self.runMenuCmd),
       ('hcr_comprefdem', None, 'comprefdem', None, 'Help on comprefdem', self.runMenuCmd),
       ('hcr_comprefpha', None, 'comprefpha', None, 'Help on comprefpha', self.runMenuCmd),
       ('hcr_coregpm', None, 'coregpm', None, 'Help on coregpm', self.runMenuCmd),
       ('hcr_dem', None, 'dem', None, 'Help on dem', self.runMenuCmd),
       ('hcr_dem2slant2h', None, 'dem2slant2h', None, 'Help on dem2slant2h', self.runMenuCmd),
       ('hcr_demassist', None, 'demassist', None, 'Help on demassist', self.runMenuCmd),
       ('hcr_dinsar', None, 'dinsar', None, 'Help on dinsar', self.runMenuCmd),
       ('hcr_dorisProcess2OutputFile', None, 'dorisProcess2OutputFile', None, 'Help on dorisProcess2OutputFile', self.runMenuCmd),
       ('hcr_error', None, 'error', None, 'Help on error', self.runMenuCmd),
       ('hcr_exclude', None, 'exclude', None, 'Help on exclude', self.runMenuCmd),
       ('hcr_filtphase', None, 'filtphase', None, 'Help on filtphase', self.runMenuCmd),
       ('hcr_filtrange', None, 'filtrange', None, 'Help on filtrange', self.runMenuCmd),
       ('hcr_fine', None, 'fine', None, 'Help on fine', self.runMenuCmd),
       ('hcr_generateRandomString', None, 'generateRandomString', None, 'Help on generateRandomString', self.runMenuCmd),
       ('hcr_geocode', None, 'geocode', None, 'Help on geocode', self.runMenuCmd),
       ('hcr_getSystemEndianness', None, 'getSystemEndianness', None, 'Help on getSystemEndianness', self.runMenuCmd),
       ('hcr_gnuplot_baseline', None, 'gnuplot__baseline', None, 'Help on gnuplot_baseline', self.runMenuCmd),
       ('hcr_h', None, 'h', None, 'Help on h', self.runMenuCmd),
       ('hcr_initialize', None, 'initialize', None, 'Help on initialize', self.runMenuCmd),
       ('hcr_interfero', None, 'interfero', None, 'Help on interfero', self.runMenuCmd),
       ('hcr_m_crop', None, 'm__crop', None, 'Help on m_crop', self.runMenuCmd),
       ('hcr_m_filtazi', None, 'm__filtazi', None, 'Help on m_filtazi', self.runMenuCmd),
       ('hcr_m_ovs', None, 'm__ovs', None, 'Help on m_ovs', self.runMenuCmd),
       ('hcr_m_porbits', None, 'm__porbits', None, 'Help on m__porbits', self.runMenuCmd),
       ('hcr_m_readfiles', None, 'm__readfiles', None, 'Help on m_readfiles', self.runMenuCmd),
       ('hcr_m_simamp', None, 'm__simamp', None, 'Help on m_simamp', self.runMenuCmd),
       ('hcr_m_timing', None, 'm__timing', None, 'Help on m_timing', self.runMenuCmd),
       ('hcr_mask', None, 'mask', None, 'Help on mask', self.runMenuCmd),
       ('hcr_mvDorisFiles', None, 'mvDorisFiles', None, 'Help on mvDorisFiles', self.runMenuCmd),
       ('hcr_p', None, 'p', None, 'Help on p', self.runMenuCmd),
       ('hcr_pn2rs', None, 'pn2rs', None, 'Help on pn2rs', self.runMenuCmd),
       ('hcr_pp', None, 'pp', None, 'Help on pp', self.runMenuCmd),
       ('hcr_quejob', None, 'quejob', None, 'Help on quejob', self.runMenuCmd),
       ('hcr_raster', None, 'raster', None, 'Help on raster', self.runMenuCmd),
       ('hcr_reltiming', None, 'reltiming', None, 'Help on reltiming', self.runMenuCmd),
       ('hcr_report', None, 'report', None, 'Help on report', self.runMenuCmd),
       ('hcr_resample', None, 'resample', None, 'Help on resample', self.runMenuCmd),
       ('hcr_s', None, 's', None, 'Help on s', self.runMenuCmd),
       ('hcr_s_crop', None, 's__crop', None, 'Help on s_crop', self.runMenuCmd),
       ('hcr_s_crop2resample', None, 's__crop2resample', None, 'Help on s_crop2resample', self.runMenuCmd),
       ('hcr_s_filtazi', None, 's__filtazi', None, 'Help on s_filtazi', self.runMenuCmd),
       ('hcr_s_ovs', None, 's__ovs', None, 'Help on s_ovs', self.runMenuCmd),
       ('hcr_s_porbits', None, 's__porbits', None, 'Help on s_porbits', self.runMenuCmd),
       ('hcr_s_readfiles', None, 's__readfiles', None, 'Help on s_readfiles', self.runMenuCmd),
       ('hcr_saveas', None, 'saveas', None, 'Help on saveas', self.runMenuCmd),
       ('hcr_scenes', None, 'scenes', None, 'Help on scenes', self.runMenuCmd),
       ('hcr_setPS1', None, 'setPS1', None, 'Help on setPS1', self.runMenuCmd),
       ('hcr_settings', None, 'settings', None, 'Help on settings', self.runMenuCmd),
       ('hcr_slant2h', None, 'slant2h', None, 'Help on slant2h', self.runMenuCmd),
       ('hcr_slant2htrick', None, 'slant2htrick', None, 'Help on slant2htrick', self.runMenuCmd),
       ('hcr_strcmpi', None, 'strcmpi', None, 'Help on strcmpi', self.runMenuCmd),
       ('hcr_subtrrefdem', None, 'subtrrefdem', None, 'Help on subtrrefdem', self.runMenuCmd),
       ('hcr_subtrrefpha', None, 'subtrrefpha', None, 'Help on subtrrefpha', self.runMenuCmd),
       ('hcr_testFunction', None, 'testFunction', None, 'Help on testFunction', self.runMenuCmd),
       ('hcr_undo', None, 'undo', None, 'Help on undo', self.runMenuCmd),
       ('hcr_unwrap', None, 'unwrap', None, 'Help on unwrap', self.runMenuCmd),
       ('hcr_view', None, 'view', None, 'Help on view', self.runMenuCmd),
       ('hcr_waitjob', None, 'waitjob', None, 'Help on waitjob', self.runMenuCmd),
       ('helpOnlineCommandReference', None, '_Online Command Reference', None, 'ADORE Command Reference wiki page.', self.help_commandreference),
       ('ShowAbout', gtk.STOCK_ABOUT, '_About', None, 'Show about information', self.show_about),
       ])
    # the uimanager
    self.uimanager = gtk.UIManager()
    accelgroup = self.uimanager.get_accel_group()
    self.window.add_accel_group( accelgroup)

    self.uimanager.insert_action_group( self.actiongroup, 0)
    #self.uimanager.add_ui_from_string(self.ui)
    self.uimanager.add_ui_from_file(ADOREFOLDER + '/gui/agooey.ui')
    # menu bar
    self.menu_bar = self.uimanager.get_widget( "/MenuBar")
    self.mainbox.pack_start( self.menu_bar, expand=False, fill=False)
    self.menu_bar.show()
    # right justify the about menu
#    self.uimanager.get_widget('/MenuBar/AboutMenu').set_right_justified( True)
    # label for answer
#    self.answer_label = gtk.Label( "Hello menus")
#    self.mainbox.pack_start( self.answer_label, padding=10)
#    self.answer_label.show()
    # vte term
    self.v = vte.Terminal()
    self.v.connect("child-exited", lambda term: gtk.main_quit())
    self.v.connect('button-press-event', self.do_button_press)
    #self.argv="adore -i -u /home/bosmanoglu/tmp/test/settings.set"
    #self.v.fork_command("sh", ["/bin/bash", "-c", "adore -i" ])
    #self.v.fork_command("sh", ["/bin/bash", "-c", "adore -i -u /home/bosmanoglu/tmp/test/settings.set"])
    self.vPid=self.v.fork_command("sh", ["/bin/bash", "-c", self.argv])
    #self.v.fork_command("sh", shlex.split(self.argv))
    self.mainbox.pack_start(self.v)
    
    # show the box
    self.mainbox.show()

  def main(self):
    gtk.main()

  def readSet(self): #readSettings
    self.set.read(self.setFile)

  def runcmd(self, cmd):
    self.v.feed_child(cmd+'\n');
#  def runMenuCmd #Is located at the bottom... Long function
  def runMenuName(self, w):
    self.runcmd(w.get_name());

  def destroy( self, w):
    gtk.main_quit()

  def demLoad( self, w):
    chooser = gtk.FileChooserDialog(title=None,action=gtk.FILE_CHOOSER_ACTION_OPEN,
                                    buttons=(gtk.STOCK_CANCEL,gtk.RESPONSE_CANCEL,gtk.STOCK_OPEN,gtk.RESPONSE_OK))
    response = chooser.run()
    if response == gtk.RESPONSE_OK:
      filename=chooser.get_filename();
      self.runcmd("dem load " + filename);
#    elif response == gtk.RESPONSE_CANCEL:
    chooser.destroy()
    
  def demMake( self, w):
    response,param=dialogs.parameter("<b>dem make</b>", "SRTM1/SRTM3 extraBufferPercentage name", "SRTM3 20 dem", "Enter parameters for...");
    if response == gtk.RESPONSE_OK:
      self.runcmd("dem make " + param);

  def do_button_press(self, terminal, event):
    if event.button == 3:
        self.create_popup(event)
        return True
    else:
        return False
    
  def file_quit( self, w):
    gtk.main_quit();

  def edit_copy( self, w):
    self.v.copy_clipboard();
    
  def edit_paste( self, w):
    self.v.paste_clipboard();

  def help_commandreference( self, w):
    gtk.show_uri(None, "http://code.google.com/p/adore-doris/wiki/Reference", gtk.gdk.CURRENT_TIME)

  def settings_check( self, w):
    self.runcmd('settings check');

  def settings_fix( self, w):
    self.runcmd('settings fix');

  def settings_load( self, w):
    self.runcmd('settings load');

  def settings_save( self, w):
    self.runcmd('settings save');

  def settings_reset( self, w):
    self.runcmd('settings reset');

  def settings_editor( self, w):
    se=settingsEditor.SettingsEditor(self); #input is main window.

  def show_about( self, w):
    #os.system("echo ADORE-GUI")#self.answer_label.set_label( "Created by Beda Kosata")
    about = gtk.AboutDialog()
    about.set_program_name("ADORE-GOOEY")
    about.set_version("0.0.0")
    about.set_copyright("(c) Batuhan Osmanoglu")
    self.readSet();
    about.set_license(open(self.set.get('adore','ADOREFOLDER').strip('\'"')+"/license.txt", 'r').read())
    about.set_comments("Automated Doris Environment")
    about.set_website("http://code.google.com/p/adore-doris/")
    about.set_logo(gtk.gdk.pixbuf_new_from_file(self.set.get('adore','ADOREFOLDER').strip('\'"') +"/man/adoreDoris_tud_um.png"))
    about.run()
    about.destroy()

  def capture_text(self,text,text2,text3,text4):
    #read current window with:
    #    print self.v.get_text(self.capture_text);
    return True

  def runMenuCmd(self, w):
    self.runcmd(self.menuCommands[w.get_name()]);
#    if w.get_name() == "checkProcess":
#      self.runcmd('check')
#    elif w.get_name() == "checkSetup":
#      self.runcmd('check setup');
#    elif w.get_name() == "checkSetup":
#      self.runcmd('check setup');
    #else:
      #do nothing.
  def create_popup(self, event):
    menu = gtk.Menu()

    copy_item = gtk.ImageMenuItem('_Copy')
    copy_icon = gtk.image_new_from_stock(gtk.STOCK_COPY,
                                         gtk.ICON_SIZE_MENU)
    copy_item.set_image(copy_icon)

    paste_item = gtk.ImageMenuItem('_Paste')
    paste_icon = gtk.image_new_from_stock(gtk.STOCK_PASTE,
                                         gtk.ICON_SIZE_MENU)
    paste_item.set_image(paste_icon)
    
#    open_item = gtk.ImageMenuItem('_Open')

    clipboard = gtk.clipboard_get(gtk.gdk.SELECTION_CLIPBOARD)
    if not clipboard.wait_is_text_available():
        paste_item.set_sensitive(False)

    if not self.v.get_has_selection():
        copy_item.set_sensitive(False)
#        open_item.set_sensitive(False)

    #menu.append(gtk.SeparatorMenuItem())
    menu.append(copy_item)
    menu.append(paste_item)
#    menu.append(open_item)
    #menu.append(gtk.SeparatorMenuItem())
    #menu.append(gtk.SeparatorMenuItem())
    #menu.append(im_menu)

    copy_item.connect('activate', lambda x: self.v.copy_clipboard())
    paste_item.connect('activate', lambda x: self.v.paste_clipboard())
#    open_item.connect('activate', lambda x: self.runcmd('echo ' + str(self.vPid) ))
    menu.show_all()
    menu.popup(None, None, None, 3, event.time)

if __name__ == "__main__":
  ADOREGUIFOLDER=os.path.split(os.path.realpath(sys.argv[0]))[0]
  ADOREFOLDER=os.path.split(ADOREGUIFOLDER)[0]
  #print ADOREFOLDER
  argv=ADOREFOLDER + "/scr/adore -g -i "
  if len(sys.argv[1:]) >0:
    argv+= " ".join(sys.argv[1:]);
    #print argv
  m = MyGUI("ADORE GUI",argv)  
  m.main()

  
