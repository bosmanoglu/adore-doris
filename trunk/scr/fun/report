#!/bin/bash
#
# USAGE: 
#	report [i12sFolder] "dorisSteps"
# Example:
#  report "interfero;coherence"

function create(){
generateRandomString
curSetFile=${randomString}
settings save ${curSetFile}

local rFolder iFolder rSteps

if [ $# -eq 2 ]; then
  rFolder="./report"
  iFolder=${1}
  rSteps=${2}
elif [ $# -eq 1 ]; then
  if [ -d "${1}" ]; then 
    rFolder="./report"
    iFolder=${1}
    rSteps="subtrrefpha;coherence"
  else
    rFolder=${runFolder}/report
    iFolder=${i12sFolder}
    rSteps=${1}
  fi
elif [ $# -eq 0 ];then
  rFolder=${runFolder}/report
  iFolder=${i12sFolder}
  rSteps="subtrrefpha;coherence"
else
  echo "Wrong number of options. Try: ? report"  
  return
fi

rFolder=`canonicalPath ${rFolder}`
iFolder=`canonicalPath ${iFolder}`
echo Input Parameters reportFolder=${rFolder} i12sFolder=${iFolder} reportSteps=${rSteps}

curFolder=${PWD}
mkdir -p ${rFolder}
rFile=`canonicalPath ${rFolder}/index.html`

writeHTMLHeader > ${rFile}
for folder in `ls ${iFolder}`
do
  cd ${iFolder}/${folder}
  settings load
  raster_format=png
  echo "<H1>${folder}</H1>" >> ${rFile}
  for step in `echo ${rSteps} | tr ';' '\n'`
  do
    handleStep "${step}"
  done
  
done
writeHTMLFooter >> ${rFile}
cd ${curFolder}

bold "Reloading user settings from temporary backup file."
settings load ${curSetFile}
rm -rf ${curSetFile}
}

function handleStep(){
 step="${1}"
 case ${step} in
 *readfiles)
   reportText ${step}
 ;;
 *porbits)
   reportText ${step}
 ;;
 m_simamp)
   reportPicture ${step}
 ;;
 m_timing)
   reportText ${step}
 ;;
 *ovs)
   reportPicture ${step}
 ;;
 *crop)
   reportPicture ${step}
 ;;
 coarseorb)
   reportText ${step}
 ;;    
 *filtazi)
   reportPicture ${step}
 ;;
 fine)
   reportText ${step}
 ;;
 reltiming)
   reportText ${step}
 ;;
 demassist)
   reportText ${step}
 ;;
 coregpm)
   reportText ${step}
 ;;
 resample)
   reportPicture ${step}
 ;;
 filtrange)
   reportPicture ${step}
 ;;
 interfero)
   reportPicture ${step}
 ;;
 comprefpha)
   reportPicture ${step}
 ;;
 subtrrefpha)
   reportPicture ${step}
 ;;
 comprefdem)
   reportPicture ${step}
 ;;
 subtrrefdem)
   reportPicture ${step}
 ;;
 coherence)
   reportPicture ${step}
 ;;
 filtphase)
   reportPicture ${step}
 ;;
 unwrap)
   reportPicture ${step}
 ;;
 dinsar)
   reportPicture ${step}
 ;;
 slant2h)
   reportPicture ${step}
 ;;
 geocode)
   reportPicture ${step}
 ;;
 *)
   reportText ${step}
 ;;
 esac
}

function reportText(){
step="${1}"
echo '<textarea readonly="readonly" rows="6" cols="80">' >> "${rFile}"
s result ${step} >> ${rFile}
echo '</textarea>' >>${rFile}
}

function reportPicture(){
 step="${1}"
 imgFile=`raster auto ${step} -M20/20 | tail -n1| cut -d":" -f2`
 if [ ! -f "${imgFile}" ]; then
   error "Can not find result for step ${step}."
 else
   mv ${imgFile} "${rFolder}"
   writePicture ${imgFile} 300 300 ${imgFile} >> "${rFile}"
 fi
}

function writePicture(){
cat << _EOFF
<img src="${1}" width="${2}" height="${3}" alt="${4}" />
_EOFF
}

function writeHTMLHeader(){
cat <<_EOF
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">
<HTML>
 <HEAD>
  <TITLE>ADORE REPORT</TITLE>
 </HEAD>
 <BODY>
_EOF
}

function writeHTMLFooter(){
cat <<_EOF
 </BODY>
</HTML>
_EOF
}

create ${@}
