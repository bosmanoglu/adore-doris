#!/bin/bash
# USAGE:
#	saveas exportFormat processName
#
# DESCRIPTION:
#  SAVEAS is an internal ADORE command. 
#  It prepares DORIS results so that they can be opened by other programs. 
#  Currently ENVI and ArcGIS are supported. 
#
# INPUT:
#  exportFormat: envi or arcgis. 
#  processName: Doris step to be exported.
#  
# OUTPUT:
#  Generates an HDR file with the same name as the output file of the requested doris step (processName).
#

# $0 dorisStep  
function saveas_envi(){
  local dorisStep=${1}
  local geocodeStatus phi_filename lam_filename phi_l0p0 lam_l0p0 phi_lNpN lam_lNpN phi_step lam_step
  local filename resfile format numpixels numlines hei_filename hei_resfile hei_format hei_numpixels hei_numlines
  local bands rotation phi_lNp0 
  geocodeStatus=`check ${i_resfile} | grep -i -w "geocoding"| cut -f2 -d:`
  if [ ${geocodeStatus} -eq "1" ]; then
    call "(filename resfile format numpixels numlines)=dorisProcess2OutputFile ${dorisStep}"
    call "(hei_filename hei_resfile hei_format hei_numpixels hei_numlines)=dorisProcess2OutputFile geocode Data_output_file_hei"
    # get the name of phi(lat) and lambda (lon) files
    phi_filename=`readRes.sh ${i_resfile} geocoding Data_output_file_phi`
    lam_filename=`readRes.sh ${i_resfile} geocoding Data_output_file_lamda`
    #get the coordinates for 1st px
    phi_l0p0=`cpxfiddle -w ${hei_numpixels} -f ${hei_format} -qnormal -l1 -L1 -p1 -P1 ${phi_filename} 2>/dev/null | tr -d "\n"`
    lam_l0p0=`cpxfiddle -w ${hei_numpixels} -f ${hei_format} -qnormal -l1 -L1 -p1 -P1 ${lam_filename} 2>/dev/null | tr -d "\n"`
    #get the coordinates for last px on 1st line
    # lam = longitude so divide by numpix
    lam_l0pN=`cpxfiddle -w ${hei_numpixels} -f ${hei_format} -qnormal -l1 -L1 -p${hei_numpixels} -P${hei_numpixels} ${lam_filename} 2>/dev/null | tr -d "\n"`
    lam_step=`echo "${lam_l0pN} ${lam_l0p0} ${numpixels}" | awk '{printf "%e", ($1-$2)/$3};'`
    #get the coordinates for last line on 1st col.(pixel)
    # phi is latitude so divide by numlines
    phi_lNp0=`cpxfiddle -w ${hei_numpixels} -f ${hei_format} -qnormal -l${hei_numlines} -L${hei_numlines} -p1 -P1 ${phi_filename} 2>/dev/null | tr -d "\n"`        
	# Below line has a problem without -1 multiplier in Envi. 
    phi_step=`echo "${phi_lNp0} ${phi_l0p0} ${numlines}"  | awk '{printf "%e", -1*($1-$2)/$3};'` 
    #calculate rotation
    lam_lNp0=`cpxfiddle -w ${hei_numpixels} -f ${hei_format} -qnormal -l${hei_numlines} -L${hei_numlines} -p1 -P1 ${lam_filename} 2>/dev/null | tr -d "\n"`
    rotation=`echo "${phi_lNp0} ${phi_l0p0} ${lam_lNp0} ${lam_l0p0}" | awk '{PI=3.1415;printf "%.8f", 90+(atan2($1-$2, $3-$4)*180/PI)};'`
    #change format to envi 
    [ ${format} == "cr4" ] && format="4" && bands="2"
    [ ${format} == "ci2" ] && format="2" && bands="2"
    [ ${format} == "r4" ] && format="4"  && bands="1"
    [ ${format} == "i2" ] && format="2"  && bands="1"
cat > ${filename}.hdr <<_EndHere
ENVI
description = {DORIS ${dorisStep} output: ${filename}}
samples = ${numpixels}
lines   = ${numlines}
bands   = ${bands}
header offset = 0
file type = ENVI Standard
data type = ${format}
interleave = bip
sensor type = Unknown
byte order = 0
map info = {Geographic Lat/Lon, 1.5000, 1.5000, ${lam_l0p0}, ${phi_l0p0}, ${lam_step}, ${phi_step}, WGS-84, units=Degrees, rotation=${rotation}}
default bands = {1}
wavelength units = Unknown

_EndHere
#    band names = {}
    echo "ENVI header file: ${filename}.hdr"
    echo "SUCCESS: saveas_envi"
  else
    echo "Please first do the geocoding step to export to ENVI."
  fi
}

function saveas_arcgis(){
  dorisStep=${1}
  local geocodeStatus phi_filename lam_filename phi_l0p0 lam_l0p0 phi_lNpN lam_lNpN phi_step lam_step
  local filename resfile format numpixels numlines hei_filename hei_resfile hei_format hei_numpixels hei_numlines
  local bands endian

  geocodeStatus=`check ${i_resfile} | grep -i -w "geocoding"| cut -f2 -d:`
  if [ ${geocodeStatus} -eq "1" ]; then
    call "(filename resfile format numpixels numlines)=dorisProcess2OutputFile ${dorisStep}"
    call "(hei_filename hei_resfile hei_format hei_numpixels hei_numlines)=dorisProcess2OutputFile geocode Data_output_file_hei"
    # get the name of phi(lat) and lambda (lon) files
    phi_filename=`readRes.sh ${i_resfile} geocoding Data_output_file_phi`
    lam_filename=`readRes.sh ${i_resfile} geocoding Data_output_file_lamda`
    #get the coordinates for 1st px
    phi_l0p0=`cpxfiddle -w ${hei_numpixels} -f ${hei_format} -qnormal -l1 -L1 -p1 -P1 ${phi_filename} 2>/dev/null | tr -d "\n"`
    lam_l0p0=`cpxfiddle -w ${hei_numpixels} -f ${hei_format} -qnormal -l1 -L1 -p1 -P1 ${lam_filename} 2>/dev/null | tr -d "\n"`
    #get the coordinates for last px on 1st line
    phi_l0pN=`cpxfiddle -w ${hei_numpixels} -f ${hei_format} -qnormal -l1 -L1 -p${hei_numpixels} -P${hei_numpixels} ${phi_filename} 2>/dev/null | tr -d "\n"`
    phi_step=`echo "${phi_l0pN} ${phi_l0p0} ${numpixels}" | awk '{printf "%.8f", ($1-$2)/$3};'`
    #get the coordinates for last line on 1st col.(pixel)
    lam_lNp0=`cpxfiddle -w ${hei_numpixels} -f ${hei_format} -qnormal -l${hei_numlines} -L${hei_numlines} -p1 -P1 ${lam_filename} 2>/dev/null | tr -d "\n"`        
    lam_step=`echo "${lam_lNp0} ${lam_l0p0} ${numlines}"  | awk '{printf "%.8f", ($1-$2)/$3};'`
    #change format to arcgis
    [ ${format} == "cr4" ] && format="32" && bands="2"
    [ ${format} == "ci2" ] && format="16" && bands="2"
    [ ${format} == "r4" ] && format="32"  && bands="1"
    [ ${format} == "i2" ] && format="16"  && bands="1"
    endian=`getSystemEndianness`
    [ ${endian} == "little" ] && endian="I"
    [ ${endian} == "big"    ] && endian="M"
cat > ${filename}.hdr <<_EndHere
BYTEORDER	${endian}
LAYOUT		BIP
NROWS		${numlines}
NCOLS		${numpixels}
NBANDS		${bands}
NBITS		${format}
NODATA		-9999
ULXMAP		${phi_l0p0}
ULYMAP		${lam_l0p0}
XDIM		${phi_step}
YDIM		%{lam_step}
_EndHere
    #xllcorner     0
    #yllcorner     0
    echo "ArcGIS header file: ${filename}.hdr"
    echo "SUCCESS: saveas_arcgis"
  else
    echo "Please first do the geocoding step to export to ArcGIS."
  fi
}


case ${1} in 
  envi)
    saveas_envi ${2}    
  ;;
  arcgis)
    saveas_arcgis ${2}
  ;;
esac
