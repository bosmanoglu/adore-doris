#!/bin/bash
# USAGE:
#	dem operation parameters
#	dem make [SRTM1/SRTM3] [extraBufferPercentage] [name]
#	dem load [path/to/demfile.dem]
#	dem check 
#
# DESCRIPTION:
#  DEM is an internal ADORE command.  
#  It can generate and load DEM settings to the environment.   
#
# INPUT:
#  dem: 
#	defaults to "dem check"
#  dem make SRTM1/SRTM3 extraBufferPercentage name
#	Calculates the master scene coverage and issues a call to construct_dem.sh 
#	Area if padded (enlarged) in all directions with the extraBufferPercentage.
#	You can call this function with no/some arguments. Defaults are: SRTM3 20 dem
#
#  dem load path/to/demfile.dem
# 	Load's the specified dem file. 
#	Currently supported DEM formats:
#	  -output of "dem make"
#	  -construct_dem.sh (from TU-DELFT).
#	  -ArcGIS .flt files (with .flt and .hdr files should be in the same folder and have the same name.)
#
#  dem check:
#	Checks the environment DEM settings and suggests fixes to problems.
#  
# OUTPUT:
#   dem make: Generates a folder with the dem. Leaves the hgt files in the current folder.
#   dem load: No outputs if success. Updates DORIS settings starting with sam_,dac_, and crd_.
#   dem check: Checks and displays possible problems fixes on stdout.
#

function makeSrtmDem(){
  local srtm buffer name center_lat center_lon size_rg size_az radar_band_width inc_angle
  local size_rg_km size_az_km dem_area settings_file
  srtm=${1:-SRTM3}  
  buffer=${2:-20}
  name=${3:-dem}
  #check resfiles
  [ ! -e ${m_resfile} ] && echo "I can not find the m_resfile. Is it defined? Are we in the wrong folder?" && return;
  
  echo "I'll generate ${srtm} DEM."
  echo "Extra buffer size is set to ${buffer}%."  
  ## get center coordinates
  center_lat=`readRes.sh ${m_resfile} readfiles Scene_centre_latitude | tr -d '\n'`
  center_lon=`readRes.sh ${m_resfile} readfiles Scene_centre_longitude | tr -d '\n'`
  ## get crop size
  #last_step="readfiles" #`check ${s_resfile} | grep -w "1" | cut -f2 -d:`
  #first_line=`readRes.sh ${m_resfile} ${last_step} First_line | tr -d '\n'`
  #last_line=`readRes.sh ${m_resfile} ${last_step} Last_line  | tr -d '\n'`
  #first_pixel=`readRes.sh ${m_resfile} ${last_step} First_pixel | tr -d '\n'`
  #last_pixel=`readRes.sh ${m_resfile} ${last_step} Last_pixel | tr -d '\n'`
  size_rg=`readRes.sh ${m_resfile} readfiles Number_of_pixels_original | tr -d '\n'` #`echo "${last_pixel} ${first_pixel}" | awk '{printf "%d", $1-$2+1};'`
  size_az=`readRes.sh ${m_resfile} readfiles Number_of_lines_original | tr -d '\n'`#`echo "${last_line} ${first_line}" | awk '{printf "%d", $1-$2+1};'`
    
  radar_band_width=`readRes.sh ${m_resfile} readfiles Total_range_band_width | tr -d '\n'`
  echo "Radar Band Width=${radar_band_width}"
  if [ -e ${i_resfile} ]; then
    inc_angle=`readRes.sh ${i_resfile} coarse_orbits inc_angle | tr -d '\n'`
  fi
  [ -z "${inc_angle}" ] && echo -e "Can not read incidence angle from ${i_resfile}. \n Using default:23.2" && inc_angle=23.2
  # get range resolution
  [ -z "${slc_rg_res}" ] && slc_rg_res=`echo "2.99e8 ${radar_band_width} ${inc_angle}" | awk '{PI=3.14159;printf "%d", $1/($2*1e6*cos($3/180*PI))};'`
  [ -z "${slc_az_res}" ] && slc_az_res=`echo "${slc_rg_res}" | awk '{printf "%d", $1/5};'`
  echo "SLC resolution [Azimuth x Range]: ${slc_az_res} x ${slc_rg_res}"
  ## find bounding box
  size_rg_km=`echo "${size_rg} ${slc_rg_res} ${buffer}" | awk '{printf "%d", ($1*$2/1000)*(100+$3)/100};'`
  size_az_km=`echo "${size_az} ${slc_az_res} ${buffer}" | awk '{printf "%d", ($1*$2/1000)*(100+$3)/100};'`
  echo "DEM size in km [Azimuth x Range]: ${size_az_km} x ${size_rg_km}"
  dem_area=`boundingBox.sh $center_lat $center_lon $size_rg_km $size_az_km | tr -d '\n'`  
  echo "Calculated bounding box for input: ${dem_area}"

  ## call construct_dem.sh
  echo "Creating DEM with: construct_dem.sh ${name} ${dem_area} ${srtm}"
  construct_dem.sh ${name} ${dem_area} ${srtm}
  ## modify settings
  settings_file="${name}/input.doris_${name}"
  updateDEMsettings ${settings_file}
}

function updateSrtmDemsettings(){
 #reads dem settings from settings file and modifies ADORE environment
  settings_file=${1}
  [ ! -e ${settings_file} ] && echo "Settings file does not exist: ${settings_file}" && return;
  echo "Loading settings for sam_, dac_, and crd_"
  sam_in_dem=`readDrs.sh ${settings_file} SAM_IN_DEM | tr -d '\n'`
  sam_in_format=`readDrs.sh ${settings_file} SAM_IN_FORMAT | tr -d '\n'`
  sam_in_size=`readDrs.sh ${settings_file} SAM_IN_SIZE | tr -d '\n'`
  sam_in_delta=`readDrs.sh ${settings_file} SAM_IN_DELTA | tr -d '\n'`
  sam_in_ul=`readDrs.sh ${settings_file} SAM_IN_UL | tr -d '\n'`
  sam_in_nodata=`readDrs.sh ${settings_file} SAM_IN_NODATA | tr -d '\n'`
  
  dac_in_dem=${sam_in_dem}
  dac_in_format=${sam_in_format}
  dac_in_size=${sam_in_size}
  dac_in_delta=${sam_in_delta}
  dac_in_ul=${sam_in_ul}
  dac_in_nodata=${sam_in_nodata}
  
  crd_in_dem=${sam_in_dem}
  crd_in_format=${sam_in_format}
  crd_in_size=${sam_in_size}
  crd_in_delta=${sam_in_delta}
  crd_in_ul=${sam_in_ul}
  crd_in_nodata=${sam_in_nodata}
}

function updateArcGisDemSettings(){
 #reads dem settings from .hdr file and modifies ADORE environment
  local settings_file demFile nrows ncols ulx uly
  settings_file=${1}
  demFile=${2}
  
  [ ! -e ${settings_file} ] && echo "Settings file does not exist: ${settings_file}" && return;
  echo "Loading settings for sam_, dac_, and crd_"
  sam_in_dem=${demFile}
  sam_in_format='r4'
  #set -x
  nrows=`grep -i -w "nrows" ${settings_file} | awk '{printf "%d", $2};'| tr -d '\n'`
  ncols=`grep -i -w "ncols" ${settings_file} | awk '{printf "%d", $2};'| tr -d '\n'`
  cellsize=`grep -i -w "cellsize" ${settings_file} | awk '{gsub(",",".");printf "%.8f", $2};'| tr -d '\n'` #change comma to dots if any
  ulx=`grep -i -w "xllcorner" ${settings_file} | awk '{gsub(",",".");printf "%.8f", $2};'| tr -d '\n'` # get upper left x. Is ArcGIS ll = doris ul ???
  uly=`grep -i -w "yllcorner" ${settings_file} | awk '{gsub(",",".");printf "%.8f", $2};'| tr -d '\n'`  
  sam_in_size="${nrows} ${ncols}"
  sam_in_delta="${cellsize} ${cellsize}"
  sam_in_ul="${uly} ${ulx}"
  sam_in_nodata=`grep -i -w "NODATA_value" ${settings_file} | awk '{gsub(",",".");printf "%d", $2};'| tr -d '\n'`
  #set +x
  dac_in_dem=${sam_in_dem}
  dac_in_format=${sam_in_format}
  dac_in_size=${sam_in_size}
  dac_in_delta=${sam_in_delta}
  dac_in_ul=${sam_in_ul}
  dac_in_nodata=${sam_in_nodata}
  
  crd_in_dem=${sam_in_dem}
  crd_in_format=${sam_in_format}
  crd_in_size=${sam_in_size}
  crd_in_delta=${sam_in_delta}
  crd_in_ul=${sam_in_ul}
  crd_in_nodata=${sam_in_nodata}
}

function checkDem(){
  #check if dem exists and in sync with environment
  everythingOK=0; #0 Yes, others no
  [ ! -e "${sam_in_dem}" ] && everythingOK=1;
  [ ! -e "${dac_in_dem}" ] && everythingOK=2;
  [ ! -e "${crd_in_dem}" ] && everythingOK=3;
  if [ ${everythingOK} ]; then
    case ${everythingOK} in
    1)
      echo "Error: 1"
      echo "sam_in_dem does not exist: ${sam_in_dem}"
      echo "If you did not get errors 2 and 3 run \"settings check\" and fix."    
    ;;
    2)
      echo "Error: 2"
      echo "dac_in_dem does not exist: ${dac_in_dem}"
      echo "If you did not get errors 1 and 3 run \"settings check\" and fix."    
    ;;
    3)
      echo "Error: 3"
      echo "crd_in_dem does not exist: ${crd_in_dem}"
      echo "If you did not get errors 1 and 2 run \"settings check\" and fix."    
    ;;
    *)
      echo "Error: -"
      echo "There are some problems with your DEM settings."
      echo "But I don't know how to help you... Sorry..."
    ;;
    esac
  else
    echo "Everything seems fine." 
  fi
}

function main(){
  local srtm buffer demFile demPath demBasename settings_file
  case ${1} in
    make)
      srtm=${2:-SRTM3}
      buffer=${3:-20}
      #check if dem exists. 
      #if not make new.
      if [ ! -e "${sam_in_dem}" ]; then
        makeSrtmDem ${srtm} ${buffer}
      else
        echo "It seems like you already have a DEM set for sam_in_dem: ${sam_in_dem}"
      fi
    ;;  
    load)
      if [ ${2:-undefined} == "undefined" ]; then
        echo "No DEM specified. Using sam_in_dem"
        demFile=${sam_in_dem};
      else
        demFile=${2};
      fi
      #read input settings 	
      if [ -e "${demFile}" ]; then
        if [[ "${demFile}" == *.dem* ]]; then
          echo "You are using this SRTM DEM: ${sam_in_dem}"
          #get input settings file.
          demPath=`dirname ${demFile}`
          demBasename=`basename ${demFile}`
          demBasename=${demBasename%%.dem*}	#chop the last .dem
          demBasename=${demBasename##*final_} #chop the initial final
          settings_file="input.doris_${demBasename}"        
          echo "I expect to find settings file at: ${demPath}/${settings_file}"
          if [ -e "${demPath}/${settings_file}" ]; then
            updateSrtmDemsettings ${demPath}/${settings_file}
          else 
            echo "I can not find the settings file. Can you check?"
          fi
        elif [[ "${demFile}" == *.flt* ]]; then
          echo "You are using an ArcGIS binary file as DEM: ${demFile}"        
          #get header file.
          demPath=`dirname ${demFile}`
          demBasename=`basename ${demFile}`
          demBasename=${demBasename%%.flt*}     #chop the last .flt
          settings_file="${demBasename}.hdr"
          echo "I expect to find the header file at: ${demPath}/${settings_file}"
          if [ -e "${demPath}/${settings_file}" ]; then
            updateArcGisDemSettings ${demPath}/${settings_file} ${demFile}
          else
            echo "I can not find the header file. Can you check?"
          fi
        fi
      else
        echo "The DEM file does not exist: ${sam_in_dem}"  
      fi
    ;;
    *)
      #check to see if dem exists and it is loaded.
      checkDem
    ;;
  esac
   
}

#run main function
main "${@}"