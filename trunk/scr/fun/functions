#!/bin/bash
#Source other function files
source ${ADORESCR}/fun/resfile.fun
source ${ADORESCR}/fun/plotting.fun

###### SOME FUNCTIONS

function ?
{
 h "$@"
}

function addrefpha2s_crop(){
	. ${ADORESCR}/fun/addrefpha2s_crop "${@}"
}

function archive(){
  . ${ADORESCR}/fun/archive ${@}
}

function ask()          # See "settings save" for example of use.
{
  while [ 1 -eq 1 ] ;
  do
    echo -n "$@" '[y/n] ' ; read ans
    case "$ans" in
      y*|Y*) return 0 ;;
      n*|N*) return 1 ;;
    esac
  done
}

function bold() 	#echo bold text.
{
# USAGE: 
#   bold "Text to print bold"
#
# Ex:
#   bold "This is important."
#
  echo -e "\033[1m${@}\033[0m"
}

function call(){
  functionCall=$@;
  #parse left of equal
  functionOutput=${functionCall%%=*} 
  #parse right of equal
  functionCall=${functionCall#*=}
  functionName=${functionCall%% *}
  #echo output..${functionOutput}..
  #echo call..${functionCall}..
  #echo name..${functionName}..
  #echo "setting output array"
  #echo "function output..${functionOutput}.."
  
  eval output_array=${functionOutput}
  #call function
  eval ${functionCall}
  
  arrayLen=${#output_array[@]}
  #loop over variables.
  #assign values to output variables 
  for (( k=0; k<${arrayLen}; k++ ))
  do
    # get the output name from the outputs array
    outputName=${functionName}_outputs[$k]
    # get the name of the functions original output variable
    outputName=${!outputName}
    # assign requestest output variable to original output variable
    #echo "${output_array[$k]}=${!outputName}"
    eval ${output_array[$k]}=\"${!outputName}\"
  done
  unset k output_array arrayLen outputName functionCall functionOutput functionName
}

testFunction_outputs=(output1 output2 output3) 
function testFunction(){
  output1=${2} #set the first output parameter to second input.
  output2=${1} # set the first input parameter to second output.
  output3=${3}
}
#echo "variable1=4"
#variable1=4
#echo "Initiating function call..."
#echo 'call (a b c)=testFunction ${variable1} ready breakfast ;'
#call "(a b c)=testFunction ${variable1} ready breakfast ;"
#echo "$a $b $c"
#unset a b c

function calculate_coh_multilook(){
  echo "$(( ${srp_multilook% *} * ${int_multilook% *} )) $(( ${srp_multilook#* } * ${int_multilook#* } ))"
}

function calculate_coh_winsize(){
  echo "$(( 2 * ${srp_multilook% *} * ${int_multilook% *} )) $(( 2 * ${srp_multilook#* } * ${int_multilook#* } ))"
}
  


function error() 	#echo text to stderr.
{
  echo -e "${@}" >&2
}


function getSystemEndianness()	# See saveas arcview for example
{
 local endianness=`echo -n I | od -to2 | head -n1 | cut -f2 -d" " | cut -c6`
 if [ ${endianness} -eq 1 ]; then
   echo -n "little"
 elif [ ${endianness} -eq 0 ]; then
   echo -n "big"
 else
   echo -n "unknown"
 fi
}
                            
function generateRandomString(){
  randomString=`date +%N | md5sum |md5sum`
  randomString=${randomString:1:8}; #get first 8 char
}

function canonicalPath(){
  #from http://snipplr.com/view/18026/canonical-absolute-path/  
  [ "${1:-isEmpty}" == "isEmpty" ] && echo "" || echo $(cd $(dirname "$1"); pwd -P)/$(basename "$1")
}

function mvDorisFiles(){
  . ${ADORESCR}/fun/mvDorisFiles ${@}
}

function pp()
{
#PREP, PRE-PROCESS
  #this is the default processing
  rm -f ${outputFolder}/${dorisProcess}.drs
  dorisProcess=${1}
  if [ -r "${ADOREFOLDER}/drs/${dorisVersion}/${dorisProcess}.drs" ]; then
    cat "${ADOREFOLDER}/drs/${dorisVersion}/${dorisProcess}.drs" | while read -r line; do
      newline=`eval echo -E ${line}`
      echo $newline >> ${outputFolder}/${dorisProcess}.drs
    done
  else
    echo "Unknown process ${dorisProcess}"
  fi
}

function p()
{
#PROCESS
  local fileName
  local dorisProcess=${1}
  shift; #shift so that I can pass the remaining parameters.
  #if file is given with full path run that file.
  if [ -f "${dorisProcess}" ]; then
  	. ${dorisProcess} ${@};
  #else check the scr/process to see if it is a process
  elif [ -f "${ADOREFOLDER}/scr/process/${dorisProcess}" ]; then
          . ${ADOREFOLDER}/scr/process/${dorisProcess}
  else
  # check path to see if we can find the file in the path
#    fileName=`find -name 'rs2pn' 2>/dev/null | head -n1`
#    if [ -f "${fileName}" ]; then
#      echo "Running: ${fileName} ${@}"
#      . ${fileName} ${@}
#    #else do default processing. Prepare drs file and run doris. 
    if [ -e "${ADOREFOLDER}/drs/${dorisVersion}/${dorisProcess}.drs" ]; then
 #     rm -f ${outputFolder}/${dorisProcess}.drs
 #     cat "${ADOREFOLDER}/drs/${dorisProcess}.drs" | while read line; do
 #       newline=`eval echo -E ${line}`
 #       echo $newline >> ${outputFolder}/${dorisProcess}.drs
 #     done    
      pp ${dorisProcess}
      doris ${outputFolder}/${dorisProcess}.drs
      [ $? -eq 0 ] && echo "${dorisProcess}: SUCCESS"
    else
      echo "Unknown process: ${dorisProcess}."
      lsprocess
    fi
  fi
}

function pn2rs(){
  . ${ADORESCR}/fun/pn2rs ${@}
}

function report(){
  . ${ADORESCR}/fun/report ${@}
}

function s()
{
#SHOW
  local newline line dorisProcess var variableNames
  dorisProcess=${1}
  if [ -e "${ADOREFOLDER}/drs/${dorisVersion}/${dorisProcess}.drs" ]; then
    cat "${ADOREFOLDER}/drs/${dorisVersion}/${dorisProcess}.drs" | while read -r line; do
      newline=`eval echo -E ${line}`
      echo $newline 
    done
  elif [ "${dorisProcess}" == "result" ];then
    dorisProcess=`pn2rs ${2}`
    local resfile=`pn2rs -f ${2}`
    sed -n "/_Start_${dorisProcess}/,/End_${dorisProcess}/p" ${resfile}    
  else
    variableNames='eval echo \${!${dorisProcess}*}'
    variableNames=`eval ${variableNames}`    
    if [ -n "${variableNames}" ]; then
      for var in ${variableNames}
      do
	echo "${var}=${!var}"
      done
    else
      echo "Unknown process or variable: ${dorisProcess}"
    fi
  fi
}

function setPS1()
{
local setDir

if [ -n "${u}" ]; then
  setDir=`dirname ${u}`
  cPWD=`canonicalPath "${PWD}"`
  if [ "${cPWD}" == "${setDir}" ]; then
    PS1="ADORE: "
  else
    PS1="!ADORE: "
  fi
else
  PS1="!ADORE: "
fi  
}

function strcmpi()          # See "settings save" for example of use.
{
  if [ `echo ${1} | tr [:upper:] [:lower:]` == `echo ${2} | tr [:upper:] [:lower:]` ];then
    return 0;
  else
    return 1;
  fi  
}

function checkInitialSettings(){
########################### CHECK INPUT - MAKE SUGGESTIONS#
[ "${projectFolder}" == "." ] && echo "projectFolder is set to \".\". Use with caution."
if [ ! -d "${dataFolder}" ]; then 
  echo "Please set dataFolder or run: settings init."
else
  [ -z "${master}" ] && echo "No scenes in dataFolder."
fi
if [ ! -e "${m_in_dat}" ]; then
  if [ -L "${m_in_dat}" ]; then
    echo "m_in_dat points to a broken link."
  elif [ -n "${master}" ]; then
    echo "dataFile (filename pattern for SLC) is not set correctly."
  fi
fi
if [ ! -e "${s_in_dat}" ]; then
  if [ -L "${s_in_dat}" ]; then
    echo "s_in_dat points to a broken link."
  elif [ -n "${slave}" ]; then
    echo "Can not find dataFile in slave data folder."
  fi
fi
[ "${runName}" == "default" ] && echo "runName is set to \"default\"" && echo "Any batch processing results (baselines, scripts with .adr ending) will be created under ${processFolder}/default"
}

function check(){
	. ${ADORESCR}/fun/check "${@}"
}

function dem(){
	. ${ADORESCR}/fun/dem "${@}"
}

function dem2slant2h(){
	. ${ADORESCR}/fun/dem2slant2h "${@}"
}

function exclude(){
	. ${ADORESCR}/fun/exclude "${@}"
}

function h(){
	. ${ADORESCR}/fun/h "${@}"
}

function initialize(){
	. ${ADORESCR}/fun/initialize
}

function mask(){
	. ${ADORESCR}/fun/mask "${@}"
}

function quejob(){
	. ${ADORESCR}/fun/quejob "$@"
}

function raster(){
	. ${ADORESCR}/fun/raster "$@"
}


function settings(){
	. ${ADORESCR}/fun/settings "$@"
}

function saveas(){
	. ${ADORESCR}/fun/saveas "${@}"
}

function scenes(){
	. ${ADORESCR}/fun/scenes "${@}"
}

function undo(){
	. ${ADORESCR}/fun/undo "$@"
}

function view(){
	. ${ADORESCR}/fun/view "$@"
}

function waitjob(){
	. ${ADORESCR}/fun/waitjob "$@"
}

####################################################
################### DORIS FUNCTIONS ################
####################################################
function coarsecorr(){
  p coarsecorr
}
 
function coarseorb(){
  p coarseorb
}
 
function coherence(){
  p coherence
}
 
function comprefdem(){
  p comprefdem
}
 
function comprefpha(){
  p comprefpha
}
 
function coregpm(){
  p coregpm
}
 
function demassist(){
  p demassist
}
 
function dinsar(){
  p dinsar
}
 
function filtphase(){
  p filtphase
}
 
function filtrange(){
  p filtrange
}
 
function fine(){
  p fine
}
 
function geocode(){
  p geocode
}
 
function interfero(){
  p interfero
}
 
function m_crop(){
  p m_crop
}
 
function m_filtazi(){
  p m_filtazi
}
 
function m_ovs(){
  p m_ovs
}
 
function m_porbits(){
  p m_porbits
}
 
function m_readfiles(){
  p m_readfiles
}
 
function m_simamp(){
  p m_simamp
}
 
function m_timing(){
  p m_timing
}
 
function reltiming(){
  p reltiming
}
 
function resample(){
  p resample "$@"
}
 
function s_crop(){
  p s_crop
}

function s_crop2resample(){
	. ${ADORESCR}/fun/s_crop2resample "${@}"
}

 
function s_filtazi(){
  p s_filtazi
}
 
function slant2h(){
  p slant2h
}

function slant2htrick(){
  p slant2htrick
}
 
function s_ovs(){
  p s_ovs
}
 
function s_porbits(){
  p s_porbits
}
 
function s_readfiles(){
  p s_readfiles
}
 
function subtrrefdem(){
  p subtrrefdem
}
 
function subtrrefpha(){
  p subtrrefpha
}
 
function unwrap(){
  p unwrap
}
 
function baselines(){
  #p baselines
  p ${ADOREFOLDER}/templates/baselines.adr
}

#Have a new line at the end
