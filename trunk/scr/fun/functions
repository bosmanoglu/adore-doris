#!/bin/bash
#Source other function files
source ${ADORESCR}/fun/resfile.fun
source ${ADORESCR}/fun/plotting.fun

###### SOME FUNCTIONS
function call(){
  functionCall=$@;
  #parse left of equal
  functionOutput=${functionCall%%=*} 
  #parse right of equal
  functionCall=${functionCall#*=}
  functionName=${functionCall%% *}
  #echo output..${functionOutput}..
  #echo call..${functionCall}..
  #echo name..${functionName}..
  #echo "setting output array"
  #echo "function output..${functionOutput}.."
  
  eval output_array=${functionOutput}
  #call function
  eval ${functionCall}
  
  arrayLen=${#output_array[@]}
  #loop over variables.
  #assign values to output variables 
  for (( k=0; k<${arrayLen}; k++ ))
  do
    # get the output name from the outputs array
    outputName=${functionName}_outputs[$k]
    # get the name of the functions original output variable
    outputName=${!outputName}
    # assign requestest output variable to original output variable
    #echo "${output_array[$k]}=${!outputName}"
    eval ${output_array[$k]}=\"${!outputName}\"
  done
  unset k output_array arrayLen outputName functionCall functionOutput functionName
}

testFunction_outputs=(output1 output2 output3) 
function testFunction(){
  output1=${2} #set the first output parameter to second input.
  output2=${1} # set the first input parameter to second output.
  output3=${3}
}
#echo "variable1=4"
#variable1=4
#echo "Initiating function call..."
#echo 'call (a b c)=testFunction ${variable1} ready breakfast ;'
#call "(a b c)=testFunction ${variable1} ready breakfast ;"
#echo "$a $b $c"
#unset a b c

function ask()          # See "settings save" for example of use.
{
  echo -n "$@" '[y/n] ' ; read ans
  case "$ans" in
    y*|Y*) return 0 ;;
    *) return 1 ;;
  esac
}

function getSystemEndianness()	# See saveas arcview for example
{
 local endianness=`echo -n I | od -to2 | head -n1 | cut -f2 -d" " | cut -c6`
 if [ ${endianness} -eq 1 ]; then
   echo -n "little"
 elif [ ${endianness} -eq 0 ]; then
   echo -n "big"
 else
   echo -n "unknown"
 fi
}
                            
function generateRandomString(){
  randomString=`date +%N | md5sum |md5sum`
  randomString=${randomString:1:8}; #get first 8 char
}

function pp()
{
#PREP, PRE-PROCESS
  #this is the default processing
  rm -f ${outputFolder}/${dorisProcess}.drs
  dorisProcess=${1}
  if [ -r "${ADOREFOLDER}/drs/${dorisProcess}.drs" ]; then
    cat "${ADOREFOLDER}/drs/${dorisProcess}.drs" | while read -r line; do
      newline=`eval echo -E ${line}`
      echo $newline >> ${outputFolder}/${dorisProcess}.drs
    done
  else
    echo "Unknown process ${dorisProcess}"
  fi
}

function p()
{
#PROCESS
 dorisProcess=${1}
  if [ -f "${ADOREFOLDER}/scr/process/${dorisProcess}" ]; then
          . ${ADOREFOLDER}/scr/process/${dorisProcess}
  else
    if [ -e "${ADOREFOLDER}/drs/${dorisProcess}.drs" ]; then
 #     rm -f ${outputFolder}/${dorisProcess}.drs
 #     cat "${ADOREFOLDER}/drs/${dorisProcess}.drs" | while read line; do
 #       newline=`eval echo -E ${line}`
 #       echo $newline >> ${outputFolder}/${dorisProcess}.drs
 #     done    
      pp ${dorisProcess}
      doris ${outputFolder}/${dorisProcess}.drs
      [ $? -eq 0 ] && echo "${dorisProcess}: SUCCESS"
    else
      echo "Unknown process: ${dorisProcess}."
      lsprocess
    fi
  fi
}

function s()
{
#SHOW
  local newline line dorisProcess var variableNames
  dorisProcess=${1}
  if [ -e "${ADOREFOLDER}/drs/${dorisProcess}.drs" ]; then
    cat "${ADOREFOLDER}/drs/${dorisProcess}.drs" | while read -r line; do
      newline=`eval echo -E ${line}`
      echo $newline 
    done
  else
    variableNames='eval echo \${!${dorisProcess}*}'
    variableNames=`eval ${variableNames}`
    if [ -n "${variableNames}" ]; then
      for var in ${variableNames}
      do
	echo "${var}=${!var}"
      done
    else
      echo "Unknown process or variable: ${dorisProcess}"
    fi
  fi
}

function checkInitialSettings(){
########################### CHECK INPUT - MAKE SUGGESTIONS#
[ "${projectFolder}" == "." ] && echo "projectFolder is set to \".\". Use with caution. In general your data should be located at projectFolder/data"
[ -z "${master}" ] && echo "It seems like dataFolder and/or projectFolder is not set correctly."
[ ! -e "${m_in_dat}" ] && echo "It seems like dataFile and/or master is not set correctly. Please set the SLC file pattern(dataFile)."
[ ! -e "${s_in_dat}" ] && echo "It seems like slave is not set correctly. Please set the SLC file pattern."
[ "${runName}" == "default" ] && echo "runName is set to \"default\"" && echo "Any batch processing results (baselines, singleMasterStack) will be under ${processFolder}/default"
[ ! -d "${dataFolder}" ] && echo "dataFolder does not exist. Please set dataFolder. Current Setting: ${dataFolder}"
}

function raster(){
	. ${ADORESCR}/fun/raster "$@"
}

function settings(){
	. ${ADORESCR}/fun/settings "$@"
}

function initialize(){
	. ${ADORESCR}/fun/initialize
}

function undo(){
	. ${ADORESCR}/fun/undo "$@"
}

function dem2slant2h(){
	. ${ADORESCR}/fun/dem2slant2h "${@}"
}

function dem(){
	. ${ADORESCR}/fun/dem "${@}"
}

function saveas(){
	. ${ADORESCR}/fun/saveas "${@}"
}

function check(){
	. ${ADORESCR}/fun/check "${@}"
}

function exclude(){
	. ${ADORESCR}/fun/exclude "${@}"
}

function mask(){
	. ${ADORESCR}/fun/mask "${@}"
}

function scenes(){
	. ${ADORESCR}/fun/scenes "${@}"
}

function h(){
  [ "${1:-undefined}" == "undefined" ] && echo "..${1}.."
  if [ "${1:-undefined}" == "undefined" ]; then
    sed -n -e '/^# USAGE:/,/^$/ s/^# \?//p' < "${ADORESCR}/fun/?"
  elif [ -e "${ADORESCR}/${1}" ]; then 
    sed -n -e '/^# USAGE:/,/^$/ s/^# \?//p' < ${ADORESCR}/${1}
  elif [ -e "${ADORESCR}/process/${1}" ]; then 
    sed -n -e '/^# USAGE:/,/^$/ s/^# \?//p' < ${ADORESCR}/process/${1}              
  elif [ -e "${ADORESCR}/fun/${1}" ]; then 
    sed -n -e '/^# USAGE:/,/^$/ s/^# \?//p' < ${ADORESCR}/fun/${1}
  else
    echo "Unknown ADORE command: ${1}"
    echo 'You can get a list of ADORE commands with the command: ?'
  fi
}

####################################################
################### DORIS FUNCTIONS ################
####################################################
function coarsecorr(){
  p coarsecorr
}
 
function coarseorb(){
  p coarseorb
}
 
function coherence(){
  p coherence
}
 
function comprefdem(){
  p comprefdem
}
 
function comprefpha(){
  p comprefpha
}
 
function coregpm(){
  p coregpm
}
 
function demassist(){
  p demassist
}
 
function dinsar(){
  p dinsar
}
 
function filter(){
  p filter
}
 
function filtphase(){
  p filtphase
}
 
function filtrange(){
  p filtrange
}
 
function fine(){
  p fine
}
 
function geocode(){
  p geocode
}
 
function interfero(){
  p interfero
}
 
function m_crop(){
  p m_crop
}
 
function m_filtazi(){
  p m_filtazi
}
 
function m_ovs(){
  p m_ovs
}
 
function m_porbits(){
  p m_porbits
}
 
function m_readfiles(){
  p m_readfiles
}
 
function m_simamp(){
  p m_simamp
}
 
function m_timing(){
  p m_timing
}
 
function reltiming(){
  p reltiming
}
 
function resample(){
  p resample
}
 
function s_crop(){
  p s_crop
}
 
function s_filtazi(){
  p s_filtazi
}
 
function slant2h(){
  p slant2h
}
 
function s_ovs(){
  p s_ovs
}
 
function s_porbits(){
  p s_porbits
}
 
function s_readfiles(){
  p s_readfiles
}
 
function subtrrefdem(){
  p subtrrefdem
}
 
function subtrrefpha(){
  p subtrrefpha
}
 
function unwrap(){
  p unwrap
}
 
function baselines(){
  p baselines
}

function singleMasterStack(){
  p singleMasterStack
}

#Have a new line at the end
